/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a81be13b-e004-40f7-9daa-d5ecf5ecab8a

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float light_Intensity;
  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
// --- DHT --- //
#include "DHT.h"
#define DHTPIN 0           // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// --- Light Sensor --- //
int light;
float normalized_voltage_val;
float max_v = 3.3;
int max_data_input = 4095;
float lux;
float max_lux = 1000;
float normalized_lux_val;
#define LIGHT_PIN 4
#define SAMPLE_TIME 100

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  dht.begin();
  void read_DHT();
  void read_light();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  read_DHT();
  read_light();
}

// ----------------------------------------------- Functions ----------------------------------------------------- //
void read_DHT() {
  // put your main code here, to run repeatedly:
  // Wait a few seconds between measurements.
  delay(2000);

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // --- Assigning cloud variables --- //
  temperature = f;
  humidity = h;

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.print(F("°F; "));
}

void read_light() {
  static unsigned int lastMillis = 0;
  if ( millis() - lastMillis > SAMPLE_TIME ) {
    light = analogRead(LIGHT_PIN);
    normalized_voltage_val = (max_v * light) / (max_data_input); // Normalize the range of 0 - 4095 values to 0 - 3.3V, the voltage range of the data input pin
    normalized_lux_val = (max_lux * normalized_voltage_val) / (max_v);  // Normalize the range of 0 - 3.3V to 0 - 1000 lux, the lux range of the sensor
    Serial.print("Light Sensor Voltage: ");
    Serial.print(normalized_voltage_val);
    Serial.print("v, ");
    light_Intensity = normalized_lux_val;
    if (normalized_lux_val >= max_lux) {
      Serial.println(">1000 lux");
    }
    else {
      Serial.print(normalized_lux_val);
      Serial.println(" lux");
    }
    lastMillis = millis();
  }
}





